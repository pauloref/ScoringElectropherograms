function [trainedClassifier, peak_detection_accuracy] = SelfLearnKnnModel(trainingData,unlabelledData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData,unlabelledData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A matrix with features and the last column corresponds
%      to labels [{0},{1}].
%      unlabelledData: A matrix with features but with no label column
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Convert input to table
%% Split train and test data
labels = trainingData(:,end);
trainingData = array2table(trainingData(:,1:end-1));
cv = cvpartition(size(trainingData,1),'HoldOut',0.3);
testData = trainingData(cv.test,:);
testResponse = labels(cv.test,:);
trainingData = trainingData(~cv.test,:);
trainResponse = labels(~cv.test,:);


% Train a classifier
% This code specifies all the classifier options and trains the classifier.
trainModel = @(predictors,response) fitcknn(predictors,response,'Distance', 'Euclidean', ...
    'Exponent', [], ...
    'NumNeighbors', 10, ...
    'DistanceWeight', 'SquaredInverse', ...
    'Standardize', true, ...
    'ClassNames', [0; 1]);

knnModel = trainModel(trainingData,trainResponse);
% Perform cross-validation
partitionedModel = crossval(knnModel, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute test accuracy
yTestOriginal=predict(knnModel,testData);
scoreTestOriginal = computeScore(yTestOriginal,testResponse);
%% Self learning: Insert test data 
% predict test data
unlabelledDataNew = unlabelledData;
%Train model, predict unlabelled data. Select highest score and append to
%train data.
while ~isempty(unlabelledDataNew)
    knnModel = trainModel(xTrainNew,yTrainNew);
    [yPred,score]  = predict(knnModel,unlabelledData);
    maxScore = max(max(abs(score)));
    trainCandidateIdxs = find(score==maxScore);
    xTrainNew = [XtrainAll,unlabelledData(datasample(trainCandidateIdxs,1),:)];
    unlabelledDataNew(trainCandidateIdx,:) = [];
    yTrainNew = [Ytrain;yPred(trainCandidateIdx,:)];
end
predict(knnModel,testRe

end

function score = computeScore(expected,predicted)
    confusionM = confusionmat(expected,predicted);
    score = confusionM(2,2)/(confusionM(2,2)+confusionM(1,2)+confusionM(2,1));
end